# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: 'terraform-webfront-aws-HCL'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: deloitte-key-vault'
  inputs:
    azureSubscription: 'Recipe_Azure_Service_Conn'
    KeyVaultName: 'deloitte-key-vault'
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Use Terraform 0.12.20'
  inputs:
    terraformVersion: 0.12.20

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'terraform init'
  inputs:
    command: init
    workingDirectory: '$(System.DefaultWorkingDirectory)/_Recipes-enhancement-aws-loadbalancer-CI/drop'
    backendType: azurerm
    backendServiceArm: 'Recipe_Azure_Service_Conn'
    backendAzureRmResourceGroupName: 'AZRG-USE-ITS-RCPNPD-NPD-001'
    backendAzureRmStorageAccountName: samstorageacc
    backendAzureRmContainerName: 'aws-load-balancer-with-provisioner'
    backendAzureRmKey: 'AWSILB-Recipe.tfstate'
